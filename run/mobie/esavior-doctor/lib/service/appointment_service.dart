import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:workmanager/workmanager.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io' show Platform;
import 'package:device_info_plus/device_info_plus.dart';

// H√†m x·ª≠ l√Ω th√¥ng b√°o ƒë·∫©y khi ·ª©ng d·ª•ng ·ªü ch·∫ø ƒë·ªô n·ªÅn
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('üì® Background message: ${message.notification?.title}');

  // Trigger refresh appointments when receiving push notification
  if (message.data['action'] == 'refresh_appointments') {
    print('üîÑ Triggering appointment refresh from background message');
    // C√≥ th·ªÉ trigger m·ªôt background task ƒë·ªÉ refresh
  }
}

// ƒê·ªãnh nghƒ©a task cho Workmanager
const String fetchAppointmentsTask = 'fetchAppointmentsTask';

@pragma('vm:entry-point')
void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) async {
    print('üîÑ Workmanager task $task started at: ${DateTime.now()}');
    try {
      await Firebase.initializeApp();
      tz.initializeTimeZones();
      await initializeDateFormatting('vi', null);

      final storage = FlutterSecureStorage();
      final idString = await storage.read(key: 'doctor_id');

      final notificationsEnabled = await storage.read(key: 'notifications_enabled');
      final reminderMinutes = await storage.read(key: 'reminder_minutes');
      final exactTimeNotification = await storage.read(key: 'exact_time_notification');

      final isNotificationsEnabled = notificationsEnabled != 'false';
      final reminderMinutesValue = int.tryParse(reminderMinutes ?? '15') ?? 15;
      final isExactTimeEnabled = exactTimeNotification != 'false';

      if (!isNotificationsEnabled) {
        print('üîï Notifications disabled in settings');
        return Future.value(true);
      }

      if (idString != null) {
        final doctorId = int.tryParse(idString);
        if (doctorId != null) {
          final url = Uri.http('10.0.2.2:8081', '/api/v1/appointments/list', {
            'doctor_id': doctorId.toString(),
          });

          final response = await http.get(url);
          print('üì° Background API response: ${response.statusCode}');

          if (response.statusCode == 200) {
            final allAppointments = jsonDecode(response.body) as List<dynamic>;
            print('üìÖ Background fetched ${allAppointments.length} appointments');

            // L·ªçc ra c√°c l·ªãch h·∫πn c·∫ßn th√¥ng b√°o ngay sau khi l·∫•y d·ªØ li·ªáu
            final now = DateTime.now();
            final vietnamTimeZone = tz.getLocation('Asia/Ho_Chi_Minh');
            final filteredAppointments = _filterFutureAppointments(allAppointments, now);

            print('üìÖ Background filtered ${filteredAppointments.length} future appointments');

            // Kh·ªüi t·∫°o notifications trong background
            const AndroidInitializationSettings initializationSettingsAndroid =
            AndroidInitializationSettings('@mipmap/ic_launcher');
            const InitializationSettings initializationSettings = InitializationSettings(
              android: initializationSettingsAndroid,
            );
            await FlutterLocalNotificationsPlugin().initialize(initializationSettings);

            int scheduledCount = 0;
            final flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

            for (var i = 0; i < filteredAppointments.length; i++) {
              try {
                final Map<String, dynamic> a = filteredAppointments[i];
                final parsedMedicalDay = DateTime.parse(a['medical_day'].toString());
                final slot = a['slot'];
                const timeSlots = [8, 9, 10, 11, 13, 14, 15, 16];
                final appointmentHour = timeSlots[slot - 1];
                final appointmentTime = DateTime(
                  parsedMedicalDay.year,
                  parsedMedicalDay.month,
                  parsedMedicalDay.day,
                  appointmentHour,
                );

                final notificationTime = appointmentTime.subtract(Duration(minutes: reminderMinutesValue));

                // Check if notification time is valid
                if (notificationTime.isAfter(now)) {
                  final patientList = a['patient'] as List<dynamic>?;
                  final patientName = patientList != null && patientList.isNotEmpty
                      ? (patientList[0] as Map<String, dynamic>)['patient_name']?.toString() ?? 'Patient ID: ${a['patient_id']}'
                      : 'Patient ID: ${a['patient_id'] ?? 'Unknown'}';

                  // S·ª≠a l·ªói LED configuration
                  final androidDetails = AndroidNotificationDetails(
                    'appointment_channel_${reminderMinutesValue}min',
                    'Appointment Reminders ${reminderMinutesValue}min',
                    channelDescription: 'Notifications $reminderMinutesValue minutes before appointments',
                    importance: Importance.max,
                    priority: Priority.high,
                    showWhen: true,
                    playSound: true,
                    enableVibration: true,
                    // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
                    styleInformation: BigTextStyleInformation(
                      'L·ªãch h·∫πn v·ªõi $patientName v√†o l√∫c ${'$appointmentHour:00'} ch·ªâ c√≤n $reminderMinutesValue ph√∫t n·ªØa!',
                    ),
                  );

                  final platformChannelSpecifics = NotificationDetails(android: androidDetails);
                  final tzScheduledTime = tz.TZDateTime.from(notificationTime, vietnamTimeZone);

                  if (tzScheduledTime.isAfter(tz.TZDateTime.now(vietnamTimeZone))) {
                    await flutterLocalNotificationsPlugin.zonedSchedule(
                      i + 50000, // Offset ƒë·ªÉ tr√°nh conflict v·ªõi main app
                      'L·ªãch h·∫πn s·∫Øp t·ªõi - $reminderMinutesValue ph√∫t',
                      'L·ªãch h·∫πn v·ªõi $patientName v√†o l√∫c ${'$appointmentHour:00'} ch·ªâ c√≤n $reminderMinutesValue ph√∫t n·ªØa!',
                      tzScheduledTime,
                      platformChannelSpecifics,
                      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
                    );

                    scheduledCount++;
                    print('‚úÖ Background scheduled notification for: $patientName at $tzScheduledTime');

                    // Schedule exact time notification if enabled
                    if (isExactTimeEnabled) {
                      final nearTimeNotificationTime = appointmentTime.subtract(const Duration(minutes: 2));
                      if (nearTimeNotificationTime.isAfter(now)) {
                        // S·ª≠a l·ªói LED configuration
                        final nearTimeDetails = AndroidNotificationDetails(
                          'appointment_near_time_channel',
                          'Appointment Near Time',
                          channelDescription: 'Notifications 2 minutes before appointment time',
                          importance: Importance.max,
                          priority: Priority.high,
                          showWhen: true,
                          playSound: true,
                          enableVibration: true,
                          // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
                          styleInformation: BigTextStyleInformation(
                            'ƒê√£ ƒë·∫øn gi·ªù kh√°m v·ªõi $patientName! L·ªãch h·∫πn l√∫c ${'$appointmentHour:00'} ƒë√£ b·∫Øt ƒë·∫ßu.',
                          ),
                        );

                        final nearTimePlatformSpecifics = NotificationDetails(android: nearTimeDetails);
                        final tzNearTime = tz.TZDateTime.from(nearTimeNotificationTime, vietnamTimeZone);

                        if (tzNearTime.isAfter(tz.TZDateTime.now(vietnamTimeZone))) {
                          await flutterLocalNotificationsPlugin.zonedSchedule(
                            i + 60000, // Offset kh√°c ƒë·ªÉ tr√°nh conflict
                            'ƒê√£ ƒë·∫øn gi·ªù kh√°m!',
                            'ƒê√£ ƒë·∫øn gi·ªù kh√°m v·ªõi $patientName! L·ªãch h·∫πn l√∫c ${'$appointmentHour:00'} ƒë√£ b·∫Øt ƒë·∫ßu.',
                            tzNearTime,
                            nearTimePlatformSpecifics,
                            androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
                          );

                          scheduledCount++;
                          print('‚úÖ Background scheduled near-time notification for: $patientName');
                        }
                      }
                    }
                  }
                } else {
                  print('‚ö†Ô∏è Background: Notification time passed for appointment at $appointmentTime');
                }
              } catch (e) {
                print('‚ùå Background error processing appointment $i: $e');
                // Ti·∫øp t·ª•c x·ª≠ l√Ω c√°c l·ªãch h·∫πn kh√°c ngay c·∫£ khi c√≥ l·ªói
                continue;
              }
            }

            print('üìä Background scheduled $scheduledCount notifications');
          } else {
            print('‚ùå Background API error: ${response.statusCode}');
          }
        }
      }
    } catch (e) {
      print('‚ùå Background Workmanager error: $e');
    }
    return Future.value(true);
  });
}

// H√†m l·ªçc l·ªãch h·∫πn trong t∆∞∆°ng lai v√† c√≥ tr·∫°ng th√°i PENDING
List<Map<String, dynamic>> _filterFutureAppointments(List<dynamic> appointments, DateTime now) {
  final result = <Map<String, dynamic>>[];
  const timeSlots = [8, 9, 10, 11, 13, 14, 15, 16];

  for (var appointment in appointments) {
    try {
      final Map<String, dynamic> a = Map<String, dynamic>.from(appointment);

      // Ki·ªÉm tra tr·∫°ng th√°i
      if (a['status'] != 'PENDING') continue;

      // Ki·ªÉm tra ng√†y kh√°m
      final medicalDay = a['medical_day'];
      if (medicalDay == null) continue;

      // Parse ng√†y v√† gi·ªù kh√°m
      final parsedMedicalDay = DateTime.parse(medicalDay.toString());
      final slot = a['slot'];

      if (slot is int && slot >= 1 && slot <= 8) {
        final appointmentHour = timeSlots[slot - 1];
        final appointmentTime = DateTime(
          parsedMedicalDay.year,
          parsedMedicalDay.month,
          parsedMedicalDay.day,
          appointmentHour,
        );

        // Ch·ªâ l·∫•y c√°c l·ªãch h·∫πn trong t∆∞∆°ng lai
        if (appointmentTime.isAfter(now)) {
          result.add(a);
        }
      }
    } catch (e) {
      print('‚ùå Error filtering appointment: $e');
    }
  }

  return result;
}

class AppointmentService {
  static final AppointmentService _instance = AppointmentService._internal();
  factory AppointmentService() => _instance;
  AppointmentService._internal();

  final _storage = const FlutterSecureStorage();
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

  bool _hasExactAlarmPermission = false;
  bool _notificationsEnabled = true;
  int _reminderMinutes = 15;
  bool _exactTimeNotification = true;
  bool _isBasicInitialized = false;
  bool _isUserInitialized = false;

  // Getters
  bool get notificationsEnabled => _notificationsEnabled;
  int get reminderMinutes => _reminderMinutes;
  bool get exactTimeNotification => _exactTimeNotification;
  bool get isBasicInitialized => _isBasicInitialized;
  bool get isUserInitialized => _isUserInitialized;

  // PHASE 1: Kh·ªüi t·∫°o services c∆° b·∫£n (TR∆Ø·ªöC LOGIN)
  Future<void> initializeBasicServices() async {
    if (_isBasicInitialized) {
      print('‚ö†Ô∏è Basic services ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o r·ªìi');
      return;
    }

    try {
      print('üîß Kh·ªüi t·∫°o Firebase...');
      await _initializeFirebase();

      print('üîß Kh·ªüi t·∫°o Timezone...');
      await _initializeTimezone();

      print('üîß Kh·ªüi t·∫°o Date Formatting...');
      await _initializeDateFormatting();

      print('üîß Kh·ªüi t·∫°o Notifications...');
      await _initializeNotifications();

      print('üîß Load Notification Settings...');
      await loadNotificationSettings();

      _isBasicInitialized = true;
      print('‚úÖ Phase 1: Basic services ho√†n t·∫•t');

    } catch (e) {
      print('‚ùå L·ªói Phase 1: $e');
      throw e;
    }
  }

  // PHASE 2: Kh·ªüi t·∫°o services c·∫ßn doctor_id (SAU LOGIN)
  Future<void> initializeUserServices(int doctorId) async {
    if (!_isBasicInitialized) {
      throw Exception('Basic services ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }

    if (_isUserInitialized) {
      print('‚ö†Ô∏è User services ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o r·ªìi');
      return;
    }

    try {
      print('üîß Kh·ªüi t·∫°o Background Tasks...');
      await _scheduleBackgroundFetch();

      print('üîß Setup Firebase messaging for real-time updates...');
      await _setupFirebaseMessaging(doctorId);

      print('üîß Fetch v√† schedule notifications cho doctor $doctorId...');
      final appointments = await fetchAppointments(doctorId);
      await scheduleNotificationsForToday(appointments);

      _isUserInitialized = true;
      print('‚úÖ Phase 2: User services ho√†n t·∫•t cho doctor $doctorId');

    } catch (e) {
      print('‚ùå L·ªói Phase 2: $e');
      // Kh√¥ng throw error ƒë·ªÉ app v·∫´n ho·∫°t ƒë·ªông
    }
  }

  // Setup Firebase messaging cho real-time updates
  Future<void> _setupFirebaseMessaging(int doctorId) async {
    try {
      FirebaseMessaging messaging = FirebaseMessaging.instance;

      // Subscribe to doctor-specific topic
      await messaging.subscribeToTopic('doctor_$doctorId');
      print('üì° Subscribed to topic: doctor_$doctorId');

      // Subscribe to general appointments topic
      await messaging.subscribeToTopic('appointments_update');
      print('üì° Subscribed to topic: appointments_update');

      // Listen for foreground messages
      FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
        print('üì® Foreground message received: ${message.notification?.title}');

        if (message.data['action'] == 'refresh_appointments') {
          print('üîÑ Refreshing appointments due to push notification');
          try {
            final appointments = await fetchAppointments(doctorId);
            await scheduleNotificationsForToday(appointments);
            print('‚úÖ Appointments refreshed successfully');
          } catch (e) {
            print('‚ùå Error refreshing appointments: $e');
          }
        }

        // Show local notification
        if (message.notification != null) {
          await _flutterLocalNotificationsPlugin.show(
            message.hashCode,
            message.notification!.title,
            message.notification!.body,
            NotificationDetails(
              android: AndroidNotificationDetails(
                'high_importance_channel',
                'Th√¥ng b√°o quan tr·ªçng',
                channelDescription: 'Th√¥ng b√°o l·ªãch h·∫πn v√† nh·∫Øc nh·ªü quan tr·ªçng',
                importance: Importance.max,
                priority: Priority.high,
              ),
            ),
          );
        }
      });

    } catch (e) {
      print('‚ùå Firebase messaging setup error: $e');
    }
  }

  // Backward compatibility - s·ª≠ d·ª•ng c·∫£ 2 phases
  Future<void> initializeService() async {
    await initializeBasicServices();
    // User services s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o sau khi login
  }

  Future<void> _initializeDateFormatting() async {
    try {
      await initializeDateFormatting('vi', null);
      print('‚úÖ Locale ti·∫øng Vi·ªát ƒë√£ s·∫µn s√†ng');
    } catch (e) {
      print('‚ùå L·ªói locale: $e');
    }
  }

  Future<void> loadNotificationSettings() async {
    try {
      final notificationsEnabled = await _storage.read(key: 'notifications_enabled');
      final reminderMinutes = await _storage.read(key: 'reminder_minutes');
      final exactTimeNotification = await _storage.read(key: 'exact_time_notification');

      _notificationsEnabled = notificationsEnabled != 'false';
      _reminderMinutes = int.tryParse(reminderMinutes ?? '15') ?? 15;
      _exactTimeNotification = exactTimeNotification != 'false';

      print('üì± Settings: notifications=$_notificationsEnabled, minutes=$_reminderMinutes, exactTime=$_exactTimeNotification');
    } catch (e) {
      print('‚ùå L·ªói load settings: $e');
    }
  }

  Future<void> _initializeFirebase() async {
    try {
      await Firebase.initializeApp();
      print('‚úÖ Firebase s·∫µn s√†ng');

      FirebaseMessaging messaging = FirebaseMessaging.instance;
      await messaging.requestPermission();

      FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
      String? token = await messaging.getToken();
      if (token != null) {
        print('üîë FCM Token: ${token.substring(0, 20)}...');
      }
    } catch (e) {
      print('‚ùå Firebase error: $e');
      throw e;
    }
  }

  Future<void> _initializeTimezone() async {
    tz.initializeTimeZones();
    print('‚úÖ Timezone s·∫µn s√†ng');
  }

  Future<void> _checkAndRequestPermissionsBasedOnVersion() async {
    if (!Platform.isAndroid) return;

    try {
      final deviceInfo = DeviceInfoPlugin();
      final androidInfo = await deviceInfo.androidInfo;
      final sdkVersion = androidInfo.version.sdkInt;

      print('üì± Android SDK: $sdkVersion');

      if (sdkVersion >= 33) {
        final notificationStatus = await Permission.notification.status;
        if (!notificationStatus.isGranted) {
          await Permission.notification.request();
        }

        final exactAlarmStatus = await Permission.scheduleExactAlarm.status;
        if (!exactAlarmStatus.isGranted) {
          await Permission.scheduleExactAlarm.request();
        }

        _hasExactAlarmPermission = await Permission.scheduleExactAlarm.isGranted;

      } else if (sdkVersion >= 31) {
        final exactAlarmStatus = await Permission.scheduleExactAlarm.status;
        if (!exactAlarmStatus.isGranted) {
          await Permission.scheduleExactAlarm.request();
        }

        _hasExactAlarmPermission = await Permission.scheduleExactAlarm.isGranted;

      } else {
        _hasExactAlarmPermission = true;
      }

      print('üîê Exact alarm permission: $_hasExactAlarmPermission');

    } catch (e) {
      print('‚ùå Permission error: $e');
      _hasExactAlarmPermission = false;
    }
  }

  Future<void> _initializeNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('@mipmap/ic_launcher');

    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        print('üëÜ Notification tapped: ${response.payload}');
      },
    );

    const AndroidNotificationChannel highImportanceChannel = AndroidNotificationChannel(
      'high_importance_channel',
      'Th√¥ng b√°o quan tr·ªçng',
      description: 'Th√¥ng b√°o l·ªãch h·∫πn v√† nh·∫Øc nh·ªü quan tr·ªçng',
      importance: Importance.max,
      playSound: true,
      enableVibration: true,
      // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
    );

    const AndroidNotificationChannel nearTimeChannel = AndroidNotificationChannel(
      'appointment_near_time_channel',
      'Th√¥ng b√°o ƒë√£ ƒë·∫øn gi·ªù kh√°m',
      description: 'Th√¥ng b√°o khi ƒë√£ ƒë·∫øn gi·ªù',
      importance: Importance.max,
      playSound: true,
      enableVibration: true,
      // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
    );

    final androidPlugin = _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

    if (androidPlugin != null) {
      await androidPlugin.createNotificationChannel(highImportanceChannel);
      await androidPlugin.createNotificationChannel(nearTimeChannel);
      final granted = await androidPlugin.requestNotificationsPermission();
      print('üîî Notification permission: ${granted ?? false}');
    }

    await _checkAndRequestPermissionsBasedOnVersion();
    print('‚úÖ Notifications s·∫µn s√†ng');
  }

  Future<void> scheduleNotification({
    required int id,
    required String patientName,
    required String timeSlot,
    required DateTime appointmentTime,
  }) async {
    if (!_notificationsEnabled) {
      print('üîï Notifications disabled for: $patientName');
      return;
    }

    try {
      final vietnamTimeZone = tz.getLocation('Asia/Ho_Chi_Minh');
      final currentTime = DateTime.now();

      final notificationTime = appointmentTime.subtract(Duration(minutes: _reminderMinutes));

      // Ki·ªÉm tra th·ªùi gian th√¥ng b√°o c√≥ h·ª£p l·ªá kh√¥ng
      if (notificationTime.isBefore(currentTime) || notificationTime.isAtSameMomentAs(currentTime)) {
        print('‚ö†Ô∏è Notification time passed or invalid for: $patientName at $timeSlot');

        // N·∫øu appointment v·∫´n trong t∆∞∆°ng lai v√† c√≤n √≠t nh·∫•t 1 ph√∫t
        if (appointmentTime.isAfter(currentTime) &&
            appointmentTime.difference(currentTime).inMinutes >= 1) {
          print('üîÑ Showing immediate notification');

          final AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
            'appointment_immediate_channel',
            'Immediate Appointment Reminders',
            channelDescription: 'Immediate notifications for upcoming appointments',
            importance: Importance.max,
            priority: Priority.high,
            showWhen: true,
            playSound: true,
            enableVibration: true,
            // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
          );

          final NotificationDetails platformChannelSpecifics = NotificationDetails(
            android: androidDetails,
          );

          await _flutterLocalNotificationsPlugin.show(
            id,
            'L·ªãch h·∫πn s·∫Øp t·ªõi!',
            'L·ªãch h·∫πn v·ªõi $patientName v√†o l√∫c $timeSlot s·∫Øp di·ªÖn ra! C√≤n ${appointmentTime.difference(currentTime).inMinutes} ph√∫t n·ªØa.',
            platformChannelSpecifics,
          );

          print('‚úÖ Immediate notification shown for: $patientName at $timeSlot');
        }
        return;
      }

      final AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
        'appointment_channel_${_reminderMinutes}min',
        'Appointment Reminders ${_reminderMinutes}min',
        channelDescription: 'Notifications $_reminderMinutes minutes before appointments',
        importance: Importance.max,
        priority: Priority.high,
        showWhen: true,
        playSound: true,
        enableVibration: true,
        styleInformation: BigTextStyleInformation(
          'L·ªãch h·∫πn v·ªõi $patientName v√†o l√∫c $timeSlot ch·ªâ c√≤n $_reminderMinutes ph√∫t n·ªØa! H√£y chu·∫©n b·ªã s·∫µn s√†ng.',
        ),
        // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
      );

      final NotificationDetails platformChannelSpecifics = NotificationDetails(
        android: androidDetails,
      );

      final tzScheduledTime = tz.TZDateTime.from(
        notificationTime,
        vietnamTimeZone,
      );

      // Ki·ªÉm tra l·∫°i l·∫ßn n·ªØa tr∆∞·ªõc khi schedule
      if (tzScheduledTime.isBefore(tz.TZDateTime.now(vietnamTimeZone))) {
        print('‚ö†Ô∏è TZDateTime is in the past, skipping: $tzScheduledTime');
        return;
      }

      AndroidScheduleMode scheduleMode = _hasExactAlarmPermission
          ? AndroidScheduleMode.exactAllowWhileIdle
          : AndroidScheduleMode.inexactAllowWhileIdle;

      await _flutterLocalNotificationsPlugin.zonedSchedule(
        id,
        'L·ªãch h·∫πn s·∫Øp t·ªõi - $_reminderMinutes ph√∫t',
        'L·ªãch h·∫πn v·ªõi $patientName v√†o l√∫c $timeSlot ch·ªâ c√≤n $_reminderMinutes ph√∫t n·ªØa! H√£y chu·∫©n b·ªã s·∫µn s√†ng.',
        tzScheduledTime,
        platformChannelSpecifics,
        androidScheduleMode: scheduleMode,
      );

      print('‚úÖ Scheduled ${_reminderMinutes}min notification for: $patientName at $tzScheduledTime (ID $id)');

      if (_exactTimeNotification) {
        final nearTimeNotificationTime = appointmentTime.subtract(const Duration(minutes: 2));

        if (nearTimeNotificationTime.isAfter(currentTime)) {
          final nearTimeAndroidDetails = AndroidNotificationDetails(
            'appointment_near_time_channel',
            'Appointment Near Time',
            channelDescription: 'Notifications 2 minutes before appointment time',
            importance: Importance.max,
            priority: Priority.high,
            showWhen: true,
            playSound: true,
            enableVibration: true,
            // B·ªè enableLights v√† ledColor ƒë·ªÉ tr√°nh l·ªói tr√™n c√°c thi·∫øt b·ªã c≈©
            styleInformation: BigTextStyleInformation(
              'ƒê√£ ƒë·∫øn gi·ªù kh√°m v·ªõi $patientName! L·ªãch h·∫πn l√∫c $timeSlot ƒë√£ b·∫Øt ƒë·∫ßu.',
            ),
          );

          final nearTimePlatformSpecifics = NotificationDetails(
            android: nearTimeAndroidDetails,
          );

          final tzNearTime = tz.TZDateTime.from(
            nearTimeNotificationTime,
            vietnamTimeZone,
          );

          // Ki·ªÉm tra th·ªùi gian near-time notification
          if (tzNearTime.isAfter(tz.TZDateTime.now(vietnamTimeZone))) {
            await _flutterLocalNotificationsPlugin.zonedSchedule(
              id + 10000,
              'ƒê√£ ƒë·∫øn gi·ªù kh√°m!',
              'ƒê√£ ƒë·∫øn gi·ªù kh√°m v·ªõi $patientName! L·ªãch h·∫πn l√∫c $timeSlot ƒë√£ b·∫Øt ƒë·∫ßu.',
              tzNearTime,
              nearTimePlatformSpecifics,
              androidScheduleMode: scheduleMode,
            );

            print('‚úÖ Scheduled "time to examine" notification (2min before) for: $patientName at $tzNearTime (ID ${id + 10000})');
          }
        }
      }
    } catch (e) {
      print('‚ùå Notification scheduling error: $e');
    }
  }

  Future<void> _scheduleBackgroundFetch() async {
    try {
      Workmanager().initialize(callbackDispatcher, isInDebugMode: true);

      // Periodic task v·ªõi frequency t·ªëi thi·ªÉu 15 ph√∫t
      Workmanager().registerPeriodicTask(
        'fetch-appointments-periodic',
        fetchAppointmentsTask,
        frequency: Duration(minutes: 15), // Minimum allowed by Android
        initialDelay: Duration(minutes: 1),
        constraints: Constraints(
          networkType: NetworkType.connected,
          requiresBatteryNotLow: false,
          requiresCharging: false,
          requiresDeviceIdle: false,
          requiresStorageNotLow: false,
        ),
      );

      // One-off task ƒë·ªÉ test ngay
      Workmanager().registerOneOffTask(
        'fetch-appointments-immediate',
        fetchAppointmentsTask,
        initialDelay: Duration(seconds: 30),
        constraints: Constraints(
          networkType: NetworkType.connected,
        ),
      );

      print('‚úÖ Background tasks scheduled (15min periodic + immediate test)');
    } catch (e) {
      print('‚ùå Background task scheduling error: $e');
    }
  }

  // Fetch v√† l·ªçc appointments trong m·ªôt l·∫ßn g·ªçi
  Future<List<Map<String, dynamic>>> fetchAppointments(int doctorId) async {
    final url = Uri.http('10.0.2.2:8081', '/api/v1/appointments/list', {
      'doctor_id': doctorId.toString(),
    });

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final allAppointments = jsonDecode(response.body) as List<dynamic>;
        print('üìÖ Fetched ${allAppointments.length} total appointments for doctor $doctorId');

        // L·ªçc ngay sau khi l·∫•y d·ªØ li·ªáu
        final now = DateTime.now();
        final filteredAppointments = _filterFutureAppointments(allAppointments, now);

        print('üìÖ Filtered to ${filteredAppointments.length} future appointments');

        // S·∫Øp x·∫øp theo th·ªùi gian
        filteredAppointments.sort((a, b) {
          final dateA = DateTime.parse(a['medical_day'].toString());
          final dateB = DateTime.parse(b['medical_day'].toString());
          final dateComparison = dateA.compareTo(dateB);

          if (dateComparison == 0) {
            final slotA = a['slot'] ?? 0;
            final slotB = b['slot'] ?? 0;
            return slotA.compareTo(slotB);
          }

          return dateComparison;
        });

        return filteredAppointments;
      } else {
        throw Exception('API Error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Fetch appointments error: $e');
      throw Exception('Connection error. Please try again!');
    }
  }

  Future<void> cancelAllNotifications() async {
    await _flutterLocalNotificationsPlugin.cancelAll();
    print('üóëÔ∏è All notifications cancelled');
  }

  Future<void> scheduleNotificationsForToday(List<Map<String, dynamic>> filteredAppointments) async {
    if (!_notificationsEnabled) {
      print('üîï Notifications disabled, skipping scheduling');
      return;
    }

    await cancelAllNotifications();
    final now = DateTime.now();

    print('üìÖ Scheduling notifications for ${filteredAppointments.length} appointments');

    int scheduledCount = 0;
    const timeSlots = [8, 9, 10, 11, 13, 14, 15, 16];

    for (var i = 0; i < filteredAppointments.length; i++) {
      try {
        final a = filteredAppointments[i];
        final parsedMedicalDay = DateTime.parse(a['medical_day'].toString());
        final slot = a['slot'];

        if (slot is int && slot >= 1 && slot <= 8) {
          final appointmentHour = timeSlots[slot - 1];
          final appointmentTime = DateTime(
            parsedMedicalDay.year,
            parsedMedicalDay.month,
            parsedMedicalDay.day,
            appointmentHour,
          );

          final patientList = a['patient'] as List<dynamic>?;
          final patientName = patientList != null && patientList.isNotEmpty
              ? (patientList[0] as Map<String, dynamic>)['patient_name']?.toString() ?? 'Patient ID: ${a['patient_id']}'
              : 'Patient ID: ${a['patient_id'] ?? 'Unknown'}';

          await scheduleNotification(
            id: i,
            patientName: patientName,
            timeSlot: getTimeSlot(slot),
            appointmentTime: appointmentTime,
          );

          scheduledCount++;
        }
      } catch (e) {
        print('‚ùå Error scheduling notification for appointment $i: $e');
      }
    }

    // Check scheduled notifications
    final pendingNotifications = await _flutterLocalNotificationsPlugin.pendingNotificationRequests();
    print('üìä Scheduled $scheduledCount notifications, pending: ${pendingNotifications.length}');
  }

  String getTimeSlot(dynamic slot) {
    const timeSlots = [8, 9, 10, 11, 13, 14, 15, 16];
    if (slot is int && slot >= 1 && slot <= 8) {
      return '${timeSlots[slot - 1]}:00';
    }
    return 'Not specified';
  }

  // Method ƒë·ªÉ refresh appointments manually
  Future<void> refreshAppointments(int doctorId) async {
    try {
      print('üîÑ Manual refresh appointments for doctor $doctorId');
      final appointments = await fetchAppointments(doctorId);
      await scheduleNotificationsForToday(appointments);
      print('‚úÖ Manual refresh completed');
    } catch (e) {
      print('‚ùå Manual refresh error: $e');
      throw e;
    }
  }
}
